{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c1a62389",
   "metadata": {},
   "outputs": [],
   "source": [
    "#include <iostream>\n",
    "#include <string>\n",
    "#include <stdio.h>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "809dac2b",
   "metadata": {},
   "source": [
    "%jsroot on"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "d179d86d",
   "metadata": {},
   "outputs": [],
   "source": [
    "TFile *file = TFile::Open(\"RootFiles/DataTest.root\"); "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "db945ff4",
   "metadata": {},
   "outputs": [],
   "source": [
    "TTree *tree = (TTree*) file->Get(\"Signal\");\n",
    "TTree *bree = (TTree*) file->Get(\"Background\");"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "92e9dccc",
   "metadata": {},
   "outputs": [],
   "source": [
    "Float_t fourm;\n",
    "Float_t weight;\n",
    "Float_t fourmb;\n",
    "Float_t weightb;\n",
    "tree->SetBranchAddress(\"FourLepSystemM\", &fourm);\n",
    "tree->SetBranchAddress(\"Weight\", &weight);\n",
    "bree->SetBranchAddress(\"FourLepSystemM\", &fourmb);\n",
    "bree->SetBranchAddress(\"Weight\", &weightb);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "6851a8ff",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Warning in <TCanvas::Constructor>: Deleting canvas with same name: Canvas\n",
      "Warning in <TFile::Append>: Replacing existing TH1: variable (Potential memory leak).\n"
     ]
    }
   ],
   "source": [
    "TCanvas *canvas = new TCanvas(\"Canvas\",\"a first way to plot a variable\",800,600);\n",
    "TH1F *hist = new TH1F(\"variable\",\"Example plot: Number of leptons; Number of leptons ; Events \",200,0,200);\n",
    "\n",
    "int nentries, nbytes, i;\n",
    "nentries = (Int_t)tree->GetEntries();\n",
    "for (i = 0; i < nentries; i++)\n",
    "{\n",
    "    \n",
    "    nbytes = tree->GetEntry(i);\n",
    "    hist->Fill(fourm);\n",
    "}\n",
    "\n",
    "int nentriesb, nbytesb, ib;\n",
    "nentriesb = (Int_t)bree->GetEntries();\n",
    "for (ib = 0; ib < nentriesb; ib++)\n",
    "{\n",
    "    nbytesb = bree->GetEntry(ib);\n",
    "    hist->Fill(fourmb);\n",
    "}\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "9bf236c5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "hist->SetFillColor(kRed);\n",
    "hist->Draw();\n",
    "canvas->Draw();"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "ROOT C++",
   "language": "c++",
   "name": "root"
  },
  "language_info": {
   "codemirror_mode": "text/x-c++src",
   "file_extension": ".C",
   "mimetype": " text/x-c++src",
   "name": "c++"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
