{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b4f627ee",
   "metadata": {},
   "outputs": [],
   "source": [
    "#include <iostream>\n",
    "#include <string>\n",
    "#include <stdio.h>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cd520fbe",
   "metadata": {},
   "source": [
    "%jsroot on"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "f110119f",
   "metadata": {},
   "outputs": [],
   "source": [
    "TFile *file = TFile::Open(\"RootFiles/DataTest.root\"); "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "1a5c5179",
   "metadata": {},
   "outputs": [],
   "source": [
    "TTree *tree = (TTree*) file->Get(\"Signal\");\n",
    "TTree *bree = (TTree*) file->Get(\"Background\");"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "d5aa5bad",
   "metadata": {},
   "outputs": [],
   "source": [
    "Float_t fourm;\n",
    "Float_t weight;\n",
    "Float_t fourmb;\n",
    "Float_t weightb;\n",
    "tree->SetBranchAddress(\"FourLepSystemM\", &fourm);\n",
    "tree->SetBranchAddress(\"Weight\", &weight);\n",
    "bree->SetBranchAddress(\"FourLepSystemM\", &fourmb);\n",
    "bree->SetBranchAddress(\"Weight\", &weightb);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "7fd16364",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Warning in <TCanvas::Constructor>: Deleting canvas with same name: Canvas\n",
      "Warning in <TFile::Append>: Replacing existing TH1: variable (Potential memory leak).\n",
      "Warning in <TFile::Append>: Replacing existing TH1: variable (Potential memory leak).\n"
     ]
    }
   ],
   "source": [
    "TCanvas *canvas = new TCanvas(\"Canvas\",\"a first way to plot a variable\",800,600);\n",
    "TH1F *hist = new TH1F(\"variable\",\"Example plot: Number of leptons; Number of leptons ; Events \",200,0,200);\n",
    "TH1F *hist1 = new TH1F(\"variable\",\"Example plot: Number of leptons; Number of leptons ; Events \",200,0,200);\n",
    "\n",
    "int nentries, nbytes, i;\n",
    "nentries = (Int_t)tree->GetEntries();\n",
    "for (i = 0; i < nentries; i++)\n",
    "{\n",
    "    \n",
    "    nbytes = tree->GetEntry(i);\n",
    "    hist->Fill(fourm);\n",
    "}\n",
    "\n",
    "int nentriesb, nbytesb, ib;\n",
    "nentriesb = (Int_t)bree->GetEntries();\n",
    "for (ib = 0; ib < nentriesb; ib++)\n",
    "{\n",
    "    nbytesb = bree->GetEntry(ib);\n",
    "    hist1->Fill(fourmb);\n",
    "}\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "ac146d01",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "hist->SetFillColor(kRed);\n",
    "hist1->SetFillColor(kBlue);\n",
    "hist->Draw();\n",
    "hist1->Draw(\"same\");\n",
    "canvas->Draw();"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "ROOT C++",
   "language": "c++",
   "name": "root"
  },
  "language_info": {
   "codemirror_mode": "text/x-c++src",
   "file_extension": ".C",
   "mimetype": " text/x-c++src",
   "name": "c++"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
