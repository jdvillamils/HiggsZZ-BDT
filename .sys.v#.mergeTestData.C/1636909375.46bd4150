#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <sstream>
#include <cmath>
#include <cstdio>
#include <time.h>
#include <TROOT.h>
#include <TTree.h>
#include <TFile.h>
#include <TChain.h>
#include <iostream>
#include <stdio.h>

int mergeTestData(void){
    
    TChain* sigchain = new TChain("Signal");
    TChain* bacchain = new TChain("Background");
    sigchain->AddFile("DataTest.root");
    bacchain->AddFile("DataTest.root");
    
    Float_t fours;
    Float_t fourb;
    Float_t pts;
    Float_t ptb;
    sigchain->SetBranchAddress("FourLepSystemM", &fours);
    bacchain->SetBranchAddress("FourLepSystemM", &fourb);
    sigchain->SetBranchAddress("FourLepSystempt", &pts);
    bacchain->SetBranchAddress("FourLepSystempt", &ptb);
    
    TFile *target = new TFile("RootFiles/DataTestmerge.root","RECREATE");
    
    TTree *data = new TTree("Data","Data from samples, excluding Train data");
    
    Float_t fourdata;
    Float_t ptdata;
    
    data->Branch("FourLepSystemM", &fourdata);
    data->Branch("FourLepSystempt", &ptdata);
    
    int nentries, nbytes, k;

    nentries = (Int_t)sigchain->GetEntries();
    for (k = 0; k < nentries; k++)
    {
        nbytes = sigchain->GetEntry(k);
        fourdata=fours;
        ptdata=pts;
        data->Fill();
    }
    
    int nentriesb, nbytesb, j;

    nentriesb = (Int_t)bacchain->GetEntries();
    for (j = 0; j < nentriesb; j++)
    {
        nbytesb = bacchain->GetEntry(j);
        fourdata=fourb;
        ptdata=ptb;
        data->Fill();
    }
    data->Write();
    target->Close();
    return 0;

    
    
}