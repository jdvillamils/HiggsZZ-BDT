{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b57ecc67",
   "metadata": {},
   "outputs": [],
   "source": [
    "#include <iostream>\n",
    "#include <string>\n",
    "#include <stdio.h>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6ec2f250",
   "metadata": {},
   "source": [
    "%jsroot on"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "fe50479c",
   "metadata": {},
   "outputs": [],
   "source": [
    "TFile *file = TFile::Open(\"RootFiles/DataTest.root\"); "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "031a2022",
   "metadata": {},
   "outputs": [],
   "source": [
    "TTree *tree = (TTree*) file->Get(\"Signal\");"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "3194b7b0",
   "metadata": {},
   "outputs": [],
   "source": [
    "Float_t fourm;\n",
    "Float_t weight;\n",
    "tree->SetBranchAddress(\"FourLepSystemM\", &fourm);\n",
    "tree->SetBranchAddress(\"Weight\", &weight);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "71166866",
   "metadata": {},
   "outputs": [],
   "source": [
    "TCanvas *canvas = new TCanvas(\"Canvas\",\"a first way to plot a variable\",800,600);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "5f71760b",
   "metadata": {},
   "outputs": [],
   "source": [
    "TH1F *hist = new TH1F(\"variable\",\"Example plot: Number of leptons; Number of leptons ; Events \",5,0,300);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "132da21c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Done!\n"
     ]
    }
   ],
   "source": [
    "int nentries, nbytes, i;\n",
    "nentries = (Int_t)tree->GetEntries();\n",
    "Float_t hh;\n",
    "Float_t ww;\n",
    "for (i = 0; i < nentries; i++)\n",
    "{\n",
    "    \n",
    "    nbytes = tree->GetEntry(i);\n",
    "    hist->Fill(fourm, weight);\n",
    "}\n",
    "\n",
    "std::cout << \"Done!\" << std::endl;"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "a66ebfae",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "hist->SetFillColor(kRed);\n",
    "hist->Draw();\n",
    "canvas->Draw();"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "ROOT C++",
   "language": "c++",
   "name": "root"
  },
  "language_info": {
   "codemirror_mode": "text/x-c++src",
   "file_extension": ".C",
   "mimetype": " text/x-c++src",
   "name": "c++"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
