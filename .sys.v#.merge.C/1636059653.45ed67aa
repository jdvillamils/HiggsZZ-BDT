#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <sstream>
#include <cmath>
#include <cstdio>
#include <time.h>
#include <TROOT.h>
#include <TTree.h>
#include <TFile.h>
#include <TChain.h>
#include <iostream>
#include <stdio.h>

int merge(void){
    
    
    
    
    //----------------------
        //Train
    //---------------------
    /*{
    
    TChain* sigchain = new TChain("SignalTrain");
    TChain* bacchain = new TChain("BackgroundTrain");
    bacchain->AddFile("DataBackground.root");
    sigchain->AddFile("DataSignal.root");
    
    Float_t foursignaltrain;
    Float_t fourbacktrain;
    sigchain->SetBranchAddress("FourLepSystemMTrain", &foursignaltrain);
    bacchain->SetBranchAddress("FourLepSystemMTrain", &fourbacktrain);
    
    
    TFile *target = new TFile("DataTrain.root","RECREATE");
    
    TTree *signal = new TTree("Signal","Signal from samples");
    TTree *background = new TTree("Background","Background from samples");
    
    Float_t fourtrainsignal;
    Float_t fourtrainback;
    
    signal->Branch("FourLepSystemM", &fourtrainsignal);
    background->Branch("ForuLepSystemM", &fourtrainback);
    
    int nentries, nbytes, k;

    nentries = (Int_t)sigchain->GetEntries();
    for (k = 0; k < nentries; k++)
    {
        nbytes = sigchain->GetEntry(k);
        fourtrainsignal=foursignaltrain;
        signal->Fill();
    }
    
    int nentriesb, nbytesb, j;

    nentriesb = (Int_t)bacchain->GetEntries();
    for (j = 0; j < nentriesb; j++)
    {
        nbytesb = bacchain->GetEntry(j);
        fourtrainback=fourbacktrain;
        background->Fill();
    }
    signal->Write();
    background->Write();
    target->Close();
    return 0;
//   }*/
    
    
    //----------------
        //Background
    //-----------------
    
//    /*{    
    TChain* sigchain = new TChain("SignalTest");
    TChain* bacchain = new TChain("BackgroundTest");
    bacchain->AddFile("DataBackground.root");
    sigchain->AddFile("DataSignal.root");
    
    Float_t foursignaltest;
    Float_t fourbacktest;
    sigchain->SetBranchAddress("FourLepSystemMTest", &foursignaltest);
    bacchain->SetBranchAddress("FourLepSystemMTest", &fourbacktest);
    
    
    TFile *target = new TFile("DataTest.root","RECREATE");
    
    TTree *signal = new TTree("Signal","Signal from samples");
    TTree *background = new TTree("Background","Background from samples");
    
    Float_t fourtestsignal;
    Float_t fourtestback;
    
    signal->Branch("FourLepSystemM", &fourtestsignal);
    background->Branch("FourLepSystemM", &fourtestback);
    
    int nentries, nbytes, k;

    nentries = (Int_t)sigchain->GetEntries();
    for (k = 0; k < nentries; k++)
    {
        nbytes = sigchain->GetEntry(k);
        fourtestsignal=foursignaltest;
        signal->Fill();
    }
    
    int nentriesb, nbytesb, j;

    nentriesb = (Int_t)bacchain->GetEntries();
    for (j = 0; j < nentriesb; j++)
    {
        nbytesb = bacchain->GetEntry(j);
        fourtestback=fourbacktest;
        background->Fill();
    }
    signal->Write();
    background->Write();
    target->Close();
    return 0;
//   }*/
}
    