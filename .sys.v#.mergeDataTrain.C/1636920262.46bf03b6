#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <sstream>
#include <cmath>
#include <cstdio>
#include <time.h>
#include <TROOT.h>
#include <TTree.h>
#include <TFile.h>
#include <TChain.h>
#include <iostream>
#include <stdio.h>

int mergeDataTrain(void){
    
    
    
    
    //----------------------
        //Train
    //---------------------

    
    TChain* sigchain = new TChain("SignalTrain");
    TChain* bacchain = new TChain("BackgroundTrain");
    bacchain->AddFile("RootFiles/DataBackground.root");
    sigchain->AddFile("RootFiles/DataSignal.root");
    
    Float_t foursignaltrain;
    Float_t fourbacktrain;
    Float_t ptsignaltrain;
    Float_t ptbacktrain;
    Float_t wstrain;
    Float_t wbtrain;
    sigchain->SetBranchAddress("FourLepSystemMTrain", &foursignaltrain);
    sigchain->SetBranchAddress("FourLepSystemptTrain", &ptsignaltrain);
    sigchain->SetBranchAddress("WeightSignalTrain", &wstrain);
    bacchain->SetBranchAddress("FourLepSystemMTrain", &fourbacktrain);
    bacchain->SetBranchAddress("FourLepSystemptTrain", &ptbacktrain);
    bacchain->SetBranchAddress("WeightBackTrain", &wbtrain);
    
    
    TFile *target = new TFile("RootFiles/DataTrain.root","RECREATE");
    
    TTree *signal = new TTree("Signal","Signal from samples");
    TTree *background = new TTree("Background","Background from samples");
    
    Float_t fourtrainsignal;
    Float_t fourtrainback;
    Float_t pttrainsignal;
    Float_t pttrainback;
    Float_t ws;
    Float_t wb;
    
    signal->Branch("FourLepSystemM", &fourtrainsignal);
    signal->Branch("FourLepSystempt", &pttrainsignal);
    signal->Branch("Weight", &ws);
    background->Branch("FourLepSystemM", &fourtrainback);
    background->Branch("FourLepSystempt", &pttrainback);
    background->Branch("Weight", &wb);
    
    int nentries, nbytes, k;

    nentries = (Int_t)sigchain->GetEntries();
    for (k = 0; k < nentries; k++)
    {
        nbytes = sigchain->GetEntry(k);
        fourtrainsignal=foursignaltrain;
        pttrainsignal=ptsignaltrain;
        signal->Fill();
    }
    
    int nentriesb, nbytesb, j;

    nentriesb = (Int_t)bacchain->GetEntries();
    for (j = 0; j < nentriesb; j++)
    {
        nbytesb = bacchain->GetEntry(j);
        fourtrainback=fourbacktrain;
        pttrainback=ptbacktrain;
        background->Fill();
    }
    signal->Write();
    background->Write();
    target->Close();
    return 0;

    